{"version":3,"sources":["const/state.js","store/reducers/civilizationReducer.js","store/reducers/index.js","store/reducers/unitReducer.js","store/index.js","apis/AOE.js","store/actions/index.js","components/CivilizationList.js","components/UniqueUnit.js","components/CivilizationDetails.js","components/App.js","serviceWorker.js","index.js"],"names":["id","civilization","civilizations","combineReducers","state","intialState","action","type","payload","unit","store","createStore","reducers","applyMiddleware","thunk","axios","create","baseURL","getCivilizations","dispatch","a","AOE","get","response","data","selectCivilization","getCivilizationById","getUniqueUnit","url","CivilizationList","this","props","list","length","className","map","key","style","cursor","onClick","e","parseInt","target","name","Component","connect","bindActionCreators","UniqueUnit","nextProps","console","log","description","expansion","age","class","build_time","reload_time","attack_delay","movement_rate","line_of_sight","hit_points","range","attack","armor","accuracy","CivilizationDetails","army_type","team_bonus","bonus","civilization_bonus","unique_unit","CivilizationBonus","item","App","marginTop","renderCivilizationDetails","Boolean","window","location","hostname","match","ReactDOM","render","title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cdb72aaf.chunk.js","sourcesContent":["export default {\r\n    id: null,\r\n    civilization: null,\r\n    civilizations: []\r\n  };\r\n","import intialState from '../../const/state';\r\n\r\nexport default (state=intialState,action)=>{\r\n    switch (action.type){\r\n        case 'GET_CIVILIZATIONS':\r\n            return {...state, civilizations: action.payload};\r\n        case 'GET_CIVILIZATION_BY_ID':\r\n            return {...state, civilization: action.payload};\r\n        case 'SELECT_CIVILIZATION':\r\n            return {...state, id: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport civilizationReducer from './civilizationReducer';\r\nimport unitReducer from './unitReducer';\r\n\r\nexport default combineReducers({\r\n    civilizations: civilizationReducer,\r\n    unit: unitReducer\r\n})\r\n\r\n","export default (state=[],action)=>{\r\n    switch (action.type){\r\n        case 'GET_UNIQUE_UNIT':\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {createStore, applyMiddleware} from 'redux';\r\nimport reducers from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://cors-anywhere.herokuapp.com/https://age-of-empires-2-api.herokuapp.com/api/v1'\r\n})","import AOE from '../../apis/AOE';\r\n\r\nconst CORS_URL = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nexport const getCivilizations = () => async dispatch =>{\r\n    const response = await AOE.get('/civilizations');\r\n    dispatch({type:'GET_CIVILIZATIONS', payload: response.data.civilizations})\r\n}\r\n\r\nexport const selectCivilization = (id) => async dispatch =>{\r\n    dispatch({type:'SELECT_CIVILIZATION', payload: id})\r\n}\r\n\r\nexport const getCivilizationById = (id) => async dispatch =>{\r\n    const response = await AOE.get(`/civilization/${id}`);\r\n    dispatch({type:'GET_CIVILIZATION_BY_ID', payload: response.data})\r\n}\r\n\r\nexport const getUniqueUnit = (url) => async dispatch =>{\r\n    const response = await AOE.get(CORS_URL+url);\r\n    dispatch({type:'GET_UNIQUE_UNIT', payload: response.data})\r\n}","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {getCivilizations,selectCivilization} from '../store/actions';\r\n\r\nexport class CivilizationList extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.getCivilizations();\r\n    }\r\n\r\n    \r\n    render() {\r\n        let list = null;\r\n        if(this.props.civilizations.length >0 ){\r\n            list = this.props.civilizations;\r\n            return(\r\n                <div className=\"ui tiny horizontal list\">\r\n                {\r\n                    list.map((civilization)=>{\r\n                        return(\r\n                            <div className=\"item\" key={civilization.id}>\r\n                                <div className=\"content\">\r\n                                    <span className=\"header\" id={civilization.id} \r\n                                        style={{cursor:'pointer'}} \r\n                                        onClick={(e)=>{this.props.selectCivilization(parseInt(e.target.id))}}>\r\n                                        {civilization.name}\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <>\r\n                <div className=\"ui active centered inline loader\"></div>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return { civilizations: store.civilizations.civilizations};\r\n  };\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({getCivilizations,selectCivilization},dispatch);\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CivilizationList)\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {getUniqueUnit} from '../store/actions';\r\n\r\nexport class UniqueUnit extends Component {\r\n    componentDidMount(){\r\n        this.props.getUniqueUnit(this.props.url);\r\n    }\r\n\r\n    componentDidUpdate(nextProps){\r\n        if(nextProps.url !== this.props.url){\r\n            this.props.getUniqueUnit(this.props.url)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props);\r\n        const unit = this.props.unit;\r\n        return (\r\n            <>\r\n                <h4 className=\"ui dividing header\">Unique Unit: {unit.name}</h4>\r\n                <div className=\"line\"><p>{unit.description}</p></div>\r\n                <div className=\"line\"><p>Expansion : {unit.expansion}</p></div>\r\n                <div className=\"line\"><p>Age: {unit.age}</p></div>\r\n                <h5 className=\"ui dividing header\">Stats</h5>\r\n                <table class=\"ui red table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Build Time</th>\r\n                        <th>Reload Time</th>\r\n                        <th>Attack Delay</th>\r\n                        <th>Movement Rate</th>\r\n                        <th>Line Of Sight</th>\r\n                        <th>Hit Point</th>\r\n                        <th>Range</th>\r\n                        <th>Attack</th>\r\n                        <th>Armor</th>\r\n                        <th>Accuracy</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{unit.build_time}</td>\r\n                        <td>{unit.reload_time}</td>\r\n                        <td>{unit.attack_delay}</td>\r\n                        <td>{unit.movement_rate}</td>\r\n                        <td>{unit.line_of_sight}</td>\r\n                        <td>{unit.hit_points}</td>\r\n                        <td>{unit.range}</td>\r\n                        <td>{unit.attack}</td>\r\n                        <td>{unit.armor}</td>\r\n                        <td>{unit.accuracy}</td>\r\n                    </tr>\r\n                </tbody>\r\n                </table>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return { unit: store.unit};\r\n  };\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({getUniqueUnit},dispatch);\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(UniqueUnit)\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {getCivilizationById} from '../store/actions';\r\nimport UniqueUnit from './UniqueUnit';\r\n\r\nexport class CivilizationDetails extends Component {\r\n    componentDidUpdate(nextProps){\r\n        if(nextProps.id !== this.props.id){\r\n            this.props.getCivilizationById(this.props.id)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const civilization = this.props.civilization;\r\n        if(civilization !== null){\r\n            return (\r\n                <div className=\"ui segment\">\r\n                    <h2 className=\"ui dividing header\">{civilization.name}</h2>\r\n                    <div className=\"description\">\r\n                        <div className=\"inline fields\">\r\n                            <div className=\"field\">\r\n                                <label>Army Type: </label> <span>{civilization.army_type}</span> \r\n                            </div>\r\n                            <div className=\"field\">\r\n                                <label>Expansion : </label> <span>{civilization.expansion}</span>\r\n                            </div>\r\n                            <div className=\"field\">\r\n                                <label>Team Bonus : </label> <span>{civilization.team_bonus}</span>\r\n                            </div>\r\n                        </div>\r\n                        <h4 className=\"ui dividing header\">Pros:</h4>\r\n                        <CivilizationBonus bonus={civilization.civilization_bonus}/>\r\n                    </div>\r\n                    \r\n                    <UniqueUnit url={civilization.unique_unit[0]} />\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(<></>);\r\n        }\r\n  }\r\n}\r\n\r\n\r\nconst CivilizationBonus = (props)=> {\r\n    return(\r\n        <div className=\"ui bulleted list\">\r\n        {\r\n            props.bonus.map((item)=>{\r\n                return (\r\n                    <div className=\"item\" key={item}>{item}</div>\r\n                )\r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (store) => {\r\n    return { id: store.civilizations.id, civilization: store.civilizations.civilization};\r\n  };\r\n\r\nconst mapDispatchToProps = (dispatch) =>  bindActionCreators({getCivilizationById},dispatch);\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CivilizationDetails)\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport CivilizationList from './CivilizationList'\r\nimport CivilizationDetails from './CivilizationDetails'\r\n\r\nexport class App extends Component {\r\n\r\n    renderCivilizationDetails(){\r\n        if(this.props.id !== null){\r\n           \r\n            return(\r\n                <>\r\n                    <CivilizationDetails/>\r\n                </>\r\n            )\r\n        }\r\n        else{\r\n            return(<></>);\r\n        } \r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n            <div className=\"ui container\">\r\n                <div className=\"ui segment\" style={{marginTop:50}}>\r\n                    <CivilizationList/>\r\n                </div>\r\n                {this.renderCivilizationDetails()}\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return { civilization: store.civilizations.civilization, civilizations: store.civilizations.civilizations};\r\n};\r\n\r\nexport default connect(mapStateToProps)(App)\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n         <App title='AOE-Web' />\n    </Provider>\n    , document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}